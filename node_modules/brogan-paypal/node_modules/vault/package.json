{
  "name": "vault",
  "version": "1.2.2",
  "main": "index",
  "homepage": "https://github.paypal.com/NodeInfra/node-vault",
  "repository": {
    "type": "git",
    "url": "https://github.paypal.com/NodeInfra/node-vault.git"
  },
  "contributors": [
    {
      "name": "Erik Toth",
      "email": "ertoth@paypal.com"
    },
    {
      "name": "Sandeep Krishnan Nair",
      "email": "skgnair@paypal.com"
    },
    {
      "name": "Sanjeev Koranga",
      "email": "skoranga@paypal.com"
    }
  ],
  "license": "UNLICENSED",
  "scripts": {
    "test": "make test"
  },
  "publishConfig": {
    "registry": "http://npm.paypal.com"
  },
  "dependencies": {
    "async": "^1",
    "buffer-equal": "0.0.1",
    "cdb": "~0.0.1",
    "pinball": "~0.1.0",
    "testkeystore": "^1"
  },
  "devDependencies": {
    "mocha": "^2",
    "jshint": "^2"
  },
  "readme": "# PayPal Vault\nThis library is a wrapper for what is traditionally known as Protected Packages. It provides a simplified API for accessing protected values based on a known key.\n\n\n## API\n\nBefore using, the vault library must be configured using the full file path to the protected file (usually in a directory named 'protected' in the application root, as well as the name of the configuration file.\n\n```javascript\nvar path = require('path'),\n    vault = require('vault');\n\nvar options = {\n    name:       'fooserv',\n    dir:        path.join(process.cwd(), 'protected'),\n    passphrase: undefined, // optional\n    pinName:    undefined, // optional (will look for pattern {NAME}_PIN, so FOOSERV_PIN, for example)\n    pin:        undefined  // optional\n};\n\nvault.create(options, function (err, pkg) {\n    // package is ready to go\n    var username = pkg.get('username');\n});\n```\n\n\nOnce the library is initialized, values can be retrieved as strings or buffers.\n```javascript\nvar vault = require('vault');\nvar secret = vault.getString('mykey'); // String\nvar anotherSecret = vault.getBytes('mykey'); // Buffer\nvar notSoSecret = vault.get('b64_mykey'); // Buffer\n```\n\n***HEADS UP!*** The value returned for a key may be Base64 encoded. If this is the case you can do something like:\n```javascript\nvar vault = require('vault');\nvar base64EncodedSecret = vault.getString('mykey'); // String\nvar decodedSecret = new Buffer(base64EncodedSecret, 'base64').toString('utf8');\n```\n\nAdditionally, some protected data has been processed into a format that may be helpful for TLS/SSL scenarios.\n```javascript\nvar https = require('https');\n\n// Create an SSL Server\nvar options = vault.getServerCredentials();\nvar server = https.createServer(options);\n\n\n// Create an SSL client\nvar client = vault.getClientCredentials();\noptions = {\n    method: 'GET',\n    path: '/',\n    passphrase: client.passphrase,\n    key: client.key,\n    cert: client.cert,\n    ca: client.ca\n}\n\nvar req = https.request(options, function (res) {\n    // ...\n});\nreq.end();\n```\n\n\n## API\n```javascript\nvault.create(options, callback);\n\nvault.get(key);\n\nvault.getString(key);\n\nvault.getBytes(key);\n\nvault.getEncryptedAll();\n\nvault.containsKey(key);\n\nvault.getClientCredentials();\n\nvault.getServerCredentials();\n```\n\n\n## Testing\nTo run the tests, ensure the mocha and should devDependencies are installed and run `make test`. Note that the passphrase for the test package is 'aardvark'.\n\n\n",
  "readmeFilename": "README.md",
  "description": "This library is a wrapper for what is traditionally known as Protected Packages. It provides a simplified API for accessing protected values based on a known key.",
  "_id": "vault@1.2.2",
  "_shasum": "175d3ae57caefa9c1935764940618b1211037b4c",
  "_from": "vault@^1.1.1",
  "_resolved": "http://npm.paypal.com/vault/-/vault-1.2.2.tgz"
}
