'use strict';

var Benchmark = require('benchmark');

var rfc3394 = require('../lib/keywrap/rfc3394'),
    rfc5649 = require('../lib/keywrap/rfc5649'),
    pputil = require('../lib/pputil');

var benchmarks = [];

function add(op, obj) {
  benchmarks.push({
    name: op,
    start: function start() {
      var suite = new Benchmark.Suite();

      console.log('Benchmarking: ' + op);

      Object.keys(obj).forEach(function(name) {
        suite.add(name + '#' + op, obj[name]);
      });

      suite
        .on('cycle', function(event) {
          console.log(String(event.target));
        })
        .run();
      console.log('========================');
    }
  });
}

function start() {
  benchmarks.forEach(function(b) {
    b.start();
  });
}

(function() {
    var plain = new Buffer('00112233445566778899AABBCCDDEEFF', 'hex');
    var kek = new Buffer('000102030405060708090A0B0C0D0E0F', 'hex');
    var cipher_rfc3394 = new Buffer('1FA68B0A8112B447AEF34BD8FB5A7B829D3E862371D2CFE5', 'hex');
    var cipher_rfc5649 = new Buffer('2CEF0C9E30DE26016C230CB78BC60D51B1FE083BA0C79CD5', 'hex');

    add('keywrap', {
        'rfc3394#wrap': function() {
            rfc3394.wrap(plain, kek);
        },
        'rfc3394#unwrap': function() {
            rfc3394.unwrap(cipher_rfc3394, kek);
        },
        'rfc5649#wrap': function() {
            rfc5649.wrap(plain, kek);
        },
        'rfc5649#unwrap': function() {
            rfc5649.unwrap(cipher_rfc5649, kek);
        }
    });
}());

(function() {
    var b64 = '94hYdwdxS8wZRKSC.IzAUtsvC12NHm6bpLLF2EOZP1vf5EOedbLVsnyu8KsoXu-t';
    var correct = new Buffer('94hYdwdxS8wZRKSC/IzAUtsvC12NHm6bpLLF2EOZP1vf5EOedbLVsnyu8KsoXu+t', 'base64');

    add('pputil', {
        'base64 decode': function() {
            pputil.base64Decode(b64);
        },
        'base64 encode': function() {
            pputil.base64Encode(correct);
        },
        'identify a base64 key': function() {
            pputil.isBase64('b64_foobar');
        },
        'identify an encrypted key': function() {
            pputil.isEncrypted('encrypted_foobar');
        }
    });
}());

start();