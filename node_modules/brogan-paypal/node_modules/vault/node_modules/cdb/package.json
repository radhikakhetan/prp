{
  "name": "cdb",
  "version": "0.0.3",
  "description": "A cdb file reader for Node.js - http://cr.yp.to/cdb.html",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "publishConfig": {
    "registry": "http://npm.paypal.com"
  },
  "repository": {
    "type": "git",
    "url": "git@github.paypal.com:NodeInfra/node-cdb.git"
  },
  "keywords": [
    "node",
    "cdb",
    "javascript"
  ],
  "author": {
    "name": "Erik Toth",
    "email": "ertoth@paypal.com"
  },
  "license": "BSD",
  "readmeFilename": "README.md",
  "dependencies": {
    "async": "^1",
    "readable-stream": "~2.0.2"
  },
  "devDependencies": {
    "mocha": "^2",
    "properties": "^1.2.1"
  },
  "readme": "node-cdb\n========\n\nA [cdb](http://cr.yp.to/cdb.html) file reader for Node.js. Loosely based on [node-cdblid](https://github.com/jukebox42/node-cdblib)\nby @jukebox42.\n\n\n\nTo read a value or values for a given key, use 'find' or 'findAll'. Each of these methods reads and caches the values\nfor the provided key.\n\n```javascript\nvar reader = require('cdb').createReader('./mycdb.cdb');\n\n// 'find' will lookup and cache the first found value for the given key.\nreader.find('my_key', function (err, value) {\n    console.log('my_key = ', value);\n});\n\n\n// 'findAll' will lookup and cache an Array of all values read for the given key.\nreader.findAll('my_keys', function (err, values) {\n    console.log('my_keys = ', values.join(', '));\n});\n\n```\n\n\nIf you want a dump of all values contained in a particular CDB, use 'dump'. The use of the dump API is an implicit 'load'\nif nothing has been read/loaded previously. Note that for large CDBs this could exhaust Node.js available memory space,\nso use with caution.\n\n```javascript\nvar reader = require('cdb').createReader('./mycdb.cdb');\nreader.dump(function (err, records) {\n    console.dir(records);\n});\n```\n\n\nTo load the CDB data into memory for faster lookups, use 'read' prior to fetching values. Note that for large CDBs this\ncould exhaust Node.js available memory space, so use with caution.\n\n```javascript\nvar reader = require('cdb').createReader('./mycdb.cdb');\n\nfunction getKey() {\n    // reader is now primed and reads are from memory\n    reader.find('my_key', function (value) {\n        console.log('my_key = ', value);\n    });\n}\n\nreader.read(getKey);\n```\n\n## ReadStream (Experimental)\n\nThere is also an experimental read stream API that can be used in memory-bound scenarios.\n```javascript\nvar cdb = require('cdb');\n\nvar reader = cdb.createReadStream('./mycdb.cdb');\nreader.on('data', function (prop) {\n    console.log(prop.key, ' = ', prop.value);\n})\n\nreader.on('error', function (err) {\n    console.error(err);\n});\n\nreader.on('end', function () {\n    console.log('read end');\n});\n\nreader.on('close', function () {\n    console.log('reader closed');\n});\n```\n",
  "_id": "cdb@0.0.3",
  "_shasum": "34302ce1a4307ebd39f035891f21978858091648",
  "_from": "cdb@~0.0.1",
  "_resolved": "http://npm.paypal.com/cdb/-/cdb-0.0.3.tgz"
}
