'use strict';

var topos = require('topos');

var routes,
   middlewares;


/**
 * function to return the different services the app has been configured
 * obtained using topos module
 */
function getServiceInfo(req) {
    var info = {},
        service_info = [],
        service,
        svc,
        topos_info,
        services = req.app && req.app.kraken && req.app.kraken.get('services');

    if (services) {
        for (var serviceName in services) {
            info = {};
            info.service = serviceName;
            info.transport = services[serviceName].transport;
            info.host = services[serviceName].hostname;
            info.port = services[serviceName].port;
            info.ipport = services[serviceName].ipport;
            info.basepath = services[serviceName].basepath;
            info.server = services[serviceName].package;

            if (info.service !== 'type') {
                service_info.push(info);
            }
        }
        return service_info;
    }

    topos_info = topos.getDump();

    for (service in topos_info) {
        info = {};

        if (service === 'services') {

            for (svc in topos_info[service]) {
                info = {};
                info.service = svc;
                info.transport = topos_info[service][svc].transport;
                info.host = topos_info[service][svc].hostname;
                info.port = topos_info[service][svc].port;
                info.ipport = topos_info[service][svc].ipport;
                info.basepath = topos_info[service][svc].basepath;
                info.server = topos_info[service][svc].package;

                if (info.service !== 'type') {
                    service_info.push(info);
                }
            }

        } else {

            info.service = service;
            info.host = topos_info[service].host;
            info.port = topos_info[service].port;
            info.ipport = topos_info[service].ipport;

            if (info.service !== 'type') {
                service_info.push(info);
            }

        }
    }
    return service_info;
}

/**
* function to obtain the list of routes and their corresponding methods like get, post etc. that has been configured for the app
*/

function getExpress3Routes(req) {
   var method,
       i,
       path,
       data = {};

   var expressRoutes = req.app.routes;

   if (expressRoutes && routes) {
       return routes;
   }

   for (method in expressRoutes) {
       for (i in expressRoutes[method]) {
           path = expressRoutes[method][i].path;
           if (data[path]) {
               data[path].push(method);
           } else {
               data[path] = [];
               data[path].push(method);
           }
       }
   }
   if (Object.keys(data).length !== 0) {
      routes = data;
   } else {
      routes = null;
   }
   return routes;
}

function getExpress4Routes(req) {
   var mware,
       method,
       i,
       j,
       path,
       route,
       data = {};
   var expressRoutes = req.app._router && req.app._router.stack,
       expressRoute;

   for (i in expressRoutes) {
      mware = expressRoutes[i];
      expressRoute = mware.handle && mware.handle.stack;
      if (expressRoute) {
          for (j in expressRoute) {
              route = expressRoute[j] && expressRoute[j].route;
              if (route) {
                  data[route.path] = {
                     path: route.path,
                     methods: route.methods,
                     regexp: expressRoute[j].regexp
                  };
               }
          }
      }
   }

   if (Object.keys(data).length !== 0) {
      routes = data;
   } else {
      routes = null;
   }
   return routes;
}

function getRoutes(req) {
   return getExpress3Routes(req) || getExpress4Routes(req) || {};
}

/**
 * returns the middleware that has been configured for the app
 * @param stack argument containing the app.stack information
 * @returns array containing the middleware names
 */
function getExpress3MiddlewareInfo(req) {

    var mwares = [],
        name,
        fn,
        stack = req.app.stack;

    if (middlewares && stack) {
        return middlewares;
   }

    for (var i in stack) {
        fn = String(stack[i].handle);
        name = ((fn.substr(0, fn.indexOf('('))).split(" ")[1]);
        if (name !== '') {
            mwares.push(name);
        } else {
            mwares.push('No Name');
        }
    }

    if (Object.keys(mwares).length !== 0) {
        middlewares = mwares;
    } else {
        middlewares = null;
    }
    return middlewares;
}

function getExpress4MiddlewareInfo(req) {

    var index,
        mwares = [],
        mware;
    var expressMiddlewares = req.app._router && req.app._router.stack;

  if (expressMiddlewares && middlewares) {
      return middlewares;
  }

  for (index in expressMiddlewares) {
     mware = expressMiddlewares[index];
     mwares.push({
        name: mware.name,
        params: mware.params,
        path: mware.path,
        keys: mware.keys,
        route: mware.route
     });
  }

  if (Object.keys(mwares).length !== 0) {
     middlewares = mwares;
  } else {
     middlewares = null;
  }
  return middlewares;
}

function getMiddlewareInfo(req) {

   return getExpress3MiddlewareInfo(req) || getExpress4MiddlewareInfo(req) || [];
}


module.exports = {
   getServiceInfo: getServiceInfo,
   getRoutes: getRoutes,
   getMiddlewareInfo: getMiddlewareInfo
};
