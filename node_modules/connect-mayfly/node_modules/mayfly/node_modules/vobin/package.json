{
  "name": "vobin",
  "description": "VO Binary Serializer / Deserializer for Node",
  "version": "0.2.9",
  "preferGlobal": false,
  "author": {
    "name": "Trevor Livingston",
    "email": "trlivingston@paypal.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.paypal.com/NodeInfra/node-vobin.git"
  },
  "publishConfig": {
    "repository": "http://npm.paypal.com"
  },
  "main": "./index",
  "engines": {
    "node": ">=0.10.22"
  },
  "dependencies": {
    "bn.js": "~3.1.1"
  },
  "devDependencies": {
    "mocha": "^2",
    "chai": "^2",
    "istanbul": "~0.2.3",
    "jshint": "^2.4.1",
    "hammertime": "~0.1.2"
  },
  "scripts": {
    "test": "mocha test/*.js --reporter spec",
    "cover": "istanbul cover node_modules/.bin/_mocha -- -R spec test/**/*",
    "lint": "jshint -c .jshintrc ./lib/**/*.js ./test/*.js"
  },
  "readme": "#Overview\n\nAn **experimental** serializer / deserializer for VO binary format.\n\n### Usage\n\n```javascript\nvar VOBin = require(\"vobin\"),\n    Serializer = VOBin.Serializer,\n    Deserializer = VOBin.Deserializer;\n\nvar binaryData = Serializer.serialize(someJsonData);\n\nvar deserializedJson = Deserializer.deserialize(binaryData);\n```\n\n### Serialization Options\n\nThe Serializer takes an optional map of options:\n\n```javascript\n{\n\tversion : number, //Version, default is 1.\n\tuseBase64 : boolean, //Default false\n\tuseCompression : boolean, //Default false\n\tforceHeader : boolean, //Default false\n\tresetNeeded : boolean, //Default false\n\tbufferSize : number //Size of internal serialization buffer, default 10k\n}\n```\n\n### JSON Representations\n\nThis serializer/deserializer works with JSON data that contains type information and is typically of the form:\n\n```javascript\n{\n\tname : \"string\"\n\tfields : \"object\"\n}\n```\n\nFor VO objects, and:\n\n\n```javascript\n{\n\ttype : \"string\",\n\tvalue : \"any\"\n}\n```\n\nFor VO fields.\n\nIdeally, these would be used as underlying validation objects to a wrapper object that erases type information from the end user.\n\nExample GetFisByAccountRequest VO for FinancialInstrument::GetFisByAccountRequest:\n\n```javascript\n{\n\tname   : \"FinancialInstrument::GetFisByAccountRequest\",\n\tfields : {\n\t\tclient_actor : {\n\t\t\ttype  : \"Common::ActorInfoVO\",\n\t\t\tvalue : {\n\t\t\t\tname   : \"Common::ActorInfoVO\",\n\t\t\t\tfields : {\n\t\t\t\t\tactor_type : {\n\t\t\t\t\t\ttype  : \"sint8\",\n\t\t\t\t\t\tvalue : 1\n\t\t\t\t\t},\n\t\t\t\t\tactor_session_id : {\n\t\t\t\t\t\ttype  : \"string\",\n\t\t\t\t\t\tvalue : \"2011-11-11 00:00:00\"\n\t\t\t\t\t},\n\t\t\t\t\tactor_ip_addr : {\n\t\t\t\t\t\ttype  : \"string\",\n\t\t\t\t\t\tvalue : \"10.249.52.108\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\taccount_number : {\n\t\t\ttype  : \"uint64\",\n\t\t\tvalue : \"1731511286119924231\"\n\t\t},\n\t\tall_instruments : {\n\t\t\ttype : \"bool\",\n\t\t\tvalue: 0\n\t\t}\n\t}\n}\n```\n\nor, for example User::LoadUserDataRequest:\n\n```javascript\n{\n\tname : \"User::LoadUserDataRequest\",\n\tfields : {\n\t\taccount_load : {\n\t\t\ttype : \"User::AccountLoadVO\",\n\t\t\tvalue : {\n\t\t\t\tname : \"User::AccountLoadVO\",\n\t\t\t\tfields : {\n\t\t\t\t\taccount_number : {\n\t\t\t\t\t\ttype : \"uint64\",\n\t\t\t\t\t\tvalue : [\"1731511286119924231\"]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### VO Object Helpers\n\nA VO object helper exists that assists with building well formed VO objects, as well as performing field validation.\n\n```javascript\nvar VO = require(\"vobin\").VO;\n\nvar loadUserDataRequest = VO.build({\n\tname : \"User::LoadUserDataRequest\",\n\tfields : {\n\t\taccount_load : {\n\t\t\ttype : \"User::AccountLoadVO\",\n\t\t\tvalue : {\n\t\t\t\tname : \"User::AccountLoadVO\",\n\t\t\t\tfields : {\n\t\t\t\t\taccount_number : {\n\t\t\t\t\t\ttype : \"uint64\",\n\t\t\t\t\t\tvalue : [\"1731511286119924231\"]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n```\n\nThe *build()* method will automatically validate.\n\nYou can also build VOs progressively:\n\n```javascript\nvar accountLoad = new VO(\"User::AccountLoadVO\");\naccountLoad.addField(\"account_number\", new Field(\"uint64\", [\"1731511286119924231\"]));\n```\n\nAnd so forth.\n\n### Stripping Type\n\nOnce json is wrapped in a *VO* object, the type can be stripped for a simplified JSON form:\n\n```javascript\nvar VO = require(\"vobin\").VO;\n\nvar loadUserDataRequest = VO.build({\n\tname : \"User::LoadUserDataRequest\",\n\tfields : {\n\t\taccount_load : {\n\t\t\ttype : \"User::AccountLoadVO\",\n\t\t\tvalue : {\n\t\t\t\tname : \"User::AccountLoadVO\",\n\t\t\t\tfields : {\n\t\t\t\t\taccount_number : {\n\t\t\t\t\t\ttype : \"uint64\",\n\t\t\t\t\t\tvalue : [\"1731511286119924231\"]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\nloadUserDataRequest.json();\n```\n\nWill result in:\n\n```javascript\n{\n\taccount_load : {\n\t\taccount_number : [\"1731511286119924231\"]\n\t}\n}\n```",
  "readmeFilename": "README.md",
  "_id": "vobin@0.2.9",
  "_shasum": "8fba5672ba7830db1969dda6e866eb126659daf3",
  "_from": "vobin@^0.2.6",
  "_resolved": "http://npm.paypal.com/vobin/-/vobin-0.2.9.tgz"
}
