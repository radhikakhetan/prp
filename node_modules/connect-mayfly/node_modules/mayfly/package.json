{
  "name": "mayfly",
  "version": "0.1.35",
  "description": "Mayfly2 client for node.js",
  "main": "index.js",
  "scripts": {
    "pretest": "eslint lib test",
    "test": "NODE_ENV=test mocha --reporter=spec"
  },
  "homepage": "https://github.paypal.com/NodeServices/node-mayfly",
  "repository": {
    "type": "git",
    "url": "git@github.paypal.com:NodeServices/node-mayfly.git"
  },
  "publishConfig": {
    "registry": "http://npm.paypal.com"
  },
  "keywords": [
    "mayfly",
    "session",
    "store",
    "node",
    "nodejs",
    "javascript",
    "js"
  ],
  "author": {
    "name": "Sanjeev Koranga",
    "email": "skoranga@paypal.com"
  },
  "license": "UNLICENSED",
  "readmeFilename": "README.md",
  "dependencies": {
    "async": "^1.0.0",
    "cryptutils-paypal": "^2.0.0",
    "ip": "~0.3.0",
    "hoek": "~2.16.0",
    "struct": "~0.0.5",
    "try-require": "^1.0.0",
    "vobin": "^0.2.6"
  },
  "devDependencies": {
    "cal": "^0.5",
    "eslint": "^1.0.0",
    "express": "^3.4.0",
    "jshint": "^2",
    "heapdump": "~0.3",
    "mocha": "^2",
    "metrics": "~0.1.6",
    "nconf": "~0.6.7",
    "optimist": "~0.6.0",
    "request-local": "^0.1"
  },
  "readme": "node-mayfly (based on Mayfly2 Spec)\n===========\n\n### Configuation\n\nThis is the format of mayfly configuration object.\n\n```bash\nvar config = {\n       appName: \"\",    //default 'NodeMayflyClient'\n       namespace : \"\",  //default 'NodeClient'\n       lifetime : 18000,    //default  3 days in sec\n       crypto : true|false, //Use data encryption\n       enableDataAffinity : false|true  //data affinity feature.\n    }\n```\nLet's discuss each of the option in detail.\n\n - **appName** - Name of the application.\n - **namespace** - This is to identify the client. By default it will be 'NodeClient'. recommended not to overwrite.\n - **lifetime** - lifetime of each mayfly record (in sec). After the seconds are over, server will automatically delete the record. Default and max value is 3 days.\n - **noRetries** - number of retries for connection\n - **timeout** - timeout for connection to mayfly directory server\n - **crypto** - Boolean configuration option to decide if to use data encryption.\n - **enableDataAffinity** - disabled by default. [Data Affinity](https://confluence.paypal.com/cnfl/display/mayfly/Client+Data+Affinity)\n\n\n**Continuous Availablity Support**\n\nTo support CA in stages and LIVE, layout.json has `ipport`.\nformat for ipport - `<priority>:<qualified host name or ip>:<port>{[^<priority>:<qualified host name or ip>:<port>]}`\nSince this has higher priority than simple ip and port, so mayfly will be using it to resolve ip and ports in stages and LIVE.\n\n## Overview\n\nOne of PayPal's important infrastructure is Mayfly2, an in-memory data store / data cache.\n\nMayfly is a key-based in-memory database system, with both intra-site and inter-site data backup to guarantee high reliability and availability. Data is stored in a very flexible key-value format. It offers full Create, Read, Update and Delete (CRUD) operation.\nCommunication with Mayfly2 is via TCP/IP sockets transmitting Mayfly messages using a proprietary binary protocol. The Mayfly protocol is completely stateless and communication is a typical request-response pattern.\n\n\n##### Mayfly Server\n\nMayfly server is a stage/hyper/LIVE box that's running mayflydirectoryserv service.\n\nFor mayfly server 10.x.x.x, mayfly admin console is available at\n```bash\nhttp://10.x.x.x:10369/stats.\n```\n\nTo debug and see server logs, follow these steps\n\n```bash\nssh 10.x.x.x\ntail -f /x/web/STAGE2XXXX/mayflydirectoryserv/logs/mayflydirectoryserv/current\n ```\n\n##### Message Format\n\nmessage format is discribed here [Mayfly2 Client](https://confluence.paypal.com/cnfl/display/ICARUS/Icarus+Mayfly2+Client)\n\n##### Serialization/Deserialization\n\nhttps://github.paypal.com/Infrastructure/infra/blob/master/all/ifeature/service/mayflyng/shared/Msg.cpp\n\n\n\n## To Play with it\n\n\n1. Run npm install to load the dependencies\n```bash\n$ npm install\n```\n\n2. To see the sample crud operation using node-mayfly.\n```bash\n$ node app.js\n$ node app.js --perf=true --load=100 --timeout=1000 #optional arguments to run load testing\n```\n\n3. To run unit tests\n```bash\n$ make test\n```\n\n4. To generate and deploy code coverage\n```bash\n$ make cover          #generate coverage locally\n$ make cover.deploy   #generate coverage + deploy to github pages\n```\n",
  "_id": "mayfly@0.1.35",
  "_shasum": "e5e530b85d339f0c800a887a93e64d95174ae130",
  "_from": "mayfly@^0.1.30",
  "_resolved": "http://npm.paypal.com/mayfly/-/mayfly-0.1.35.tgz"
}
