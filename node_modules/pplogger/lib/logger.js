'use strict';


var cal = require('cal'),
    levels = require('./levels'),
    deployEnv = require('environment-paypal');


function Logger(config) {
    config = config || {};

    var type = config.type || 'console',
        format = config.format || 'console';

    // In case of 'cal' logging type, forcing formatting to be 'cal' for proper CAL formatting
    if (type === 'cal') {
        format = 'cal';
    }

    if (deployEnv.isLive() || deployEnv.isSandbox()) {
        // forcing cal in LIVE and Sandbox always
        type = 'cal';
        format = 'cal';
        this._level = levels[config.level] || levels.info;
    }
    else {
        this._level = levels[config.level] || levels.debug;
    }

    cal.setDefaultWriteStream(type, config.settings);
    cal.defaults.formatter = cal.formatter[format];
}


Logger.prototype.debug = when(levels.debug, function debug(dataArray) {
    var evt = cal.createEvent('LOG', 'DEBUG', cal.Status.SUCCESS);
    dataArray.forEach(function(data) {
        evt.addData(data);
    });
    evt.complete();
});


Logger.prototype.info = when(levels.info, function info(dataArray) {
    var evt = cal.createEvent('LOG', 'INFO', cal.Status.SUCCESS);
    dataArray.forEach(function(data) {
        evt.addData(data);
    });
    evt.complete();
});


Logger.prototype.warn = when(levels.warn, function warn(dataArray) {
    var evt = cal.createEvent('LOG', 'WARNING', cal.Status.WARNING);
    dataArray.forEach(function(data) {
        evt.addData(data);
    });
    evt.complete();
});


Logger.prototype.error = when(levels.error, function error(dataArray) {
    var evt = cal.createEvent('LOG', 'ERROR', cal.Status.ERROR);
    dataArray.forEach(function(data) {
        evt.addData(data);
    });
    evt.complete();
});


Logger.prototype.fatal = when(levels.fatal, function error(dataArray) {
    var evt = cal.createEvent('LOG', 'FATAL', cal.Status.FATAL);
    dataArray.forEach(function(data) {
        evt.addData(data);
    });
    evt.complete();
});


Logger.prototype.log = Logger.prototype.debug;


module.exports = Logger;

function when(level, fn) {
    return function (data) {
        if (this._level <= level) {
            fn.call(this, data);
        }
    };
}
